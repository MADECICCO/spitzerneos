/*
 *      color correction routines 
 *      for Spitzer Channels 1 and 2
 *      Version 1.0 - Nov 27, 2009
 *      
 *      Michael Mommert, DLR
 *      michael.mommert@dlr.de
 */


/*SPITZER IRAC RESPONSE FUNCTIONS FOR FULL ARRAYS (new curves)
 ------------------------------------------------------------*/
static double upper_limits_IRAC[] = { 4.010380, 5.221980, 6.622510, 10.496800 };
static double lower_limits_IRAC[] = { 3.081060, 3.722490, 4.744210, 6.151150 };
static double i_max_IRAC[] = { 390, 400, 310, 349 };

//response function of IRAC Channel 1 (= 3.55 microns)
//cf. http://ssc.spitzer.caltech.edu/irac/rsrf/080924ch1trans_full.txt
static double wavelengths_IRAC_ch1[] = { 3.081060, 3.082890, 3.084730, 3.086560, 3.088400, 3.090240, 3.092080, 3.093930, 3.095780, 3.097620, 3.099480, 3.101330, 3.103190, 3.105040, 3.106900, 3.108770, 3.110630, 3.112500, 3.114370, 3.116240, 3.118110, 3.119990, 3.121870, 3.123750, 3.125630, 3.127520, 3.129400, 3.131290, 3.133190, 3.135080, 3.136980, 3.138880, 3.140780, 3.142680, 3.144590, 3.146490, 3.148410, 3.150320, 3.152230, 3.154150, 3.156070, 3.157990, 3.159920, 3.161840, 3.163770, 3.165700, 3.167640, 3.169570, 3.171510, 3.173450, 3.175400, 3.177340, 3.179290, 3.181240, 3.183190, 3.185150, 3.187110, 3.189070, 3.191030, 3.192990, 3.194960, 3.196930, 3.198900, 3.200880, 3.202860, 3.204840, 3.206820, 3.208800, 3.210790, 3.212780, 3.214770, 3.216760, 3.218760, 3.220760, 3.222760, 3.224770, 3.226770, 3.228780, 3.230790, 3.232810, 3.234820, 3.236840, 3.238870, 3.240890, 3.242920, 3.244950, 3.246980, 3.249010, 3.251050, 3.253090, 3.255130, 3.257180, 3.259220, 3.261270, 3.263320, 3.265380, 3.267440, 3.269500, 3.271560, 3.273630, 3.275690, 3.277760, 3.279840, 3.281910, 3.283990, 3.286070, 3.288160, 3.290240, 3.292330, 3.294420, 3.296520, 3.298620, 3.300710, 3.302820, 3.304920, 3.307030, 3.309140, 3.311250, 3.313370, 3.315490, 3.317610, 3.319730, 3.321860, 3.323990, 3.326120, 3.328260, 3.330390, 3.332530, 3.334680, 3.336820, 3.338970, 3.341120, 3.343280, 3.345430, 3.347590, 3.349760, 3.351920, 3.354090, 3.356260, 3.358430, 3.360610, 3.362790, 3.364970, 3.367160, 3.369350, 3.371540, 3.373730, 3.375930, 3.378130, 3.380330, 3.382530, 3.384740, 3.386950, 3.389170, 3.391380, 3.393600, 3.395820, 3.398050, 3.400280, 3.402510, 3.404740, 3.406980, 3.409220, 3.411460, 3.413710, 3.415960, 3.418210, 3.420460, 3.422720, 3.424980, 3.427250, 3.429510, 3.431780, 3.434060, 3.436330, 3.438610, 3.440890, 3.443180, 3.445460, 3.447750, 3.450050, 3.452350, 3.454650, 3.456950, 3.459260, 3.461560, 3.463880, 3.466190, 3.468510, 3.470830, 3.473160, 3.475480, 3.477820, 3.480150, 3.482490, 3.484830, 3.487170, 3.489520, 3.491870, 3.494220, 3.496580, 3.498940, 3.501300, 3.503660, 3.506030, 3.508410, 3.510780, 3.513160, 3.515540, 3.517930, 3.520310, 3.522710, 3.525100, 3.527500, 3.529900, 3.532300, 3.534710, 3.537120, 3.539540, 3.541960, 3.544380, 3.546800, 3.549230, 3.551660, 3.554090, 3.556530, 3.558970, 3.561420, 3.563860, 3.566320, 3.568770, 3.571230, 3.573690, 3.576150, 3.578620, 3.581090, 3.583570, 3.586050, 3.588530, 3.591010, 3.593500, 3.595990, 3.598490, 3.600990, 3.603490, 3.606000, 3.608510, 3.611020, 3.613540, 3.616060, 3.618580, 3.621110, 3.623640, 3.626170, 3.628710, 3.631250, 3.633790, 3.636340, 3.638890, 3.641450, 3.644010, 3.646570, 3.649140, 3.651710, 3.654280, 3.656860, 3.659440, 3.662020, 3.664610, 3.667200, 3.669800, 3.672400, 3.675000, 3.677610, 3.680220, 3.682830, 3.685450, 3.688070, 3.690690, 3.693320, 3.695950, 3.698590, 3.701230, 3.703870, 3.706520, 3.709170, 3.711830, 3.714490, 3.717150, 3.719820, 3.722490, 3.725160, 3.727840, 3.730520, 3.733210, 3.735900, 3.738590, 3.741290, 3.743990, 3.746690, 3.749400, 3.752120, 3.754830, 3.757550, 3.760280, 3.763010, 3.765740, 3.768480, 3.771220, 3.773960, 3.776710, 3.779460, 3.782220, 3.784980, 3.787750, 3.790510, 3.793290, 3.796060, 3.798840, 3.801630, 3.804420, 3.807210, 3.810010, 3.812810, 3.815620, 3.818430, 3.821240, 3.824060, 3.826880, 3.829710, 3.832540, 3.835370, 3.838210, 3.841050, 3.843900, 3.846750, 3.849610, 3.852470, 3.855330, 3.858200, 3.861070, 3.863950, 3.866830, 3.869720, 3.872610, 3.875500, 3.878400, 3.881300, 3.884210, 3.887120, 3.890040, 3.892960, 3.895890, 3.898810, 3.901750, 3.904690, 3.907630, 3.910580, 3.913530, 3.916480, 3.919440, 3.922410, 3.925380, 3.928350, 3.931330, 3.934310, 3.937300, 3.940290, 3.943290, 3.946290, 3.949290, 3.952300, 3.955320, 3.958340, 3.961360, 3.964390, 3.967420, 3.970460, 3.973500, 3.976550, 3.979600, 3.982660, 3.985720, 3.988790, 3.991860, 3.994930, 3.998010, 4.001100, 4.004190, 4.007280, 4.010380 };

static double responses_IRAC_ch1[] = { 0.000490, 0.000586, 0.000453, 0.000458, 0.000439, 0.000531, 0.000641, 0.000442, 0.000535, 0.000655, 0.000525, 0.000631, 0.000618, 0.000496, 0.000700, 0.000895, 0.000873, 0.001045, 0.001294, 0.001390, 0.001683, 0.002132, 0.002413, 0.002782, 0.003343, 0.003846, 0.004596, 0.005760, 0.006889, 0.008313, 0.010170, 0.012180, 0.014820, 0.018160, 0.021810, 0.026460, 0.031970, 0.038570, 0.046500, 0.055220, 0.065330, 0.077400, 0.091470, 0.106100, 0.122000, 0.140600, 0.158900, 0.178800, 0.200200, 0.220500, 0.241200, 0.261800, 0.282200, 0.298600, 0.314000, 0.330400, 0.343100, 0.352900, 0.360600, 0.368500, 0.372300, 0.373700, 0.375000, 0.374400, 0.371800, 0.370300, 0.368600, 0.365300, 0.361900, 0.358000, 0.354100, 0.351300, 0.349500, 0.348400, 0.345200, 0.343700, 0.344600, 0.343600, 0.343600, 0.344300, 0.344800, 0.347400, 0.349600, 0.351200, 0.354100, 0.357800, 0.362300, 0.366100, 0.369800, 0.374800, 0.379500, 0.384100, 0.389500, 0.393600, 0.397400, 0.400700, 0.403400, 0.406500, 0.410400, 0.412500, 0.413700, 0.415800, 0.415800, 0.416300, 0.416500, 0.415300, 0.414500, 0.414300, 0.414500, 0.413400, 0.412500, 0.411700, 0.409100, 0.408600, 0.409100, 0.406900, 0.406000, 0.405600, 0.405000, 0.405500, 0.404400, 0.402400, 0.402700, 0.403600, 0.404200, 0.404700, 0.404300, 0.404700, 0.406600, 0.406800, 0.406600, 0.407000, 0.406700, 0.406500, 0.406700, 0.407200, 0.407000, 0.406600, 0.406300, 0.405100, 0.405100, 0.404900, 0.403900, 0.404800, 0.404100, 0.401600, 0.403300, 0.405600, 0.405600, 0.406300, 0.407100, 0.408000, 0.410900, 0.413500, 0.416000, 0.418700, 0.420800, 0.424500, 0.427300, 0.429100, 0.432100, 0.433300, 0.433500, 0.435300, 0.436700, 0.435400, 0.434400, 0.435600, 0.435100, 0.434300, 0.434000, 0.430300, 0.426500, 0.425400, 0.424300, 0.422100, 0.420200, 0.417900, 0.416300, 0.415700, 0.414300, 0.413900, 0.414000, 0.413100, 0.413400, 0.414500, 0.415800, 0.417600, 0.418600, 0.419400, 0.421800, 0.424800, 0.427100, 0.430500, 0.434300, 0.436900, 0.440200, 0.443400, 0.445100, 0.447700, 0.450600, 0.452900, 0.455700, 0.457200, 0.456400, 0.456400, 0.458300, 0.459900, 0.460500, 0.461400, 0.461500, 0.461500, 0.461600, 0.461500, 0.462100, 0.462900, 0.462000, 0.459600, 0.458000, 0.458200, 0.457100, 0.455500, 0.455500, 0.454700, 0.453700, 0.452800, 0.451800, 0.452100, 0.452600, 0.452600, 0.451500, 0.450500, 0.450300, 0.450800, 0.452200, 0.452800, 0.452800, 0.454400, 0.456200, 0.457400, 0.458600, 0.459500, 0.460200, 0.460200, 0.459600, 0.459500, 0.458800, 0.459100, 0.459700, 0.458400, 0.457600, 0.456800, 0.455800, 0.455300, 0.453600, 0.450900, 0.448700, 0.446900, 0.445600, 0.444800, 0.442500, 0.440600, 0.440100, 0.438100, 0.436900, 0.437600, 0.436400, 0.435200, 0.435500, 0.435700, 0.436700, 0.438200, 0.438900, 0.439000, 0.440500, 0.444100, 0.446000, 0.446800, 0.449500, 0.452500, 0.455100, 0.457200, 0.459000, 0.460200, 0.462300, 0.465800, 0.468800, 0.470200, 0.470500, 0.470500, 0.471000, 0.472100, 0.473200, 0.473400, 0.472700, 0.473000, 0.472800, 0.472800, 0.473200, 0.472300, 0.471000, 0.469700, 0.469400, 0.469700, 0.467500, 0.464700, 0.463700, 0.463500, 0.462200, 0.460400, 0.460100, 0.459600, 0.458400, 0.456700, 0.456800, 0.457500, 0.456800, 0.457100, 0.457100, 0.455600, 0.456400, 0.456900, 0.454100, 0.453000, 0.452900, 0.451100, 0.449500, 0.447000, 0.444300, 0.443000, 0.441300, 0.438500, 0.437400, 0.435200, 0.431700, 0.430200, 0.429400, 0.428000, 0.428000, 0.428000, 0.428200, 0.430100, 0.433000, 0.436400, 0.439600, 0.442300, 0.444500, 0.446100, 0.447100, 0.448300, 0.447300, 0.443700, 0.434700, 0.421100, 0.405000, 0.383500, 0.355900, 0.328600, 0.293700, 0.256300, 0.221500, 0.186900, 0.152200, 0.123700, 0.098900, 0.077500, 0.058690, 0.044850, 0.033730, 0.025150, 0.018770, 0.013760, 0.009610, 0.006888, 0.004779, 0.002983, 0.002031, 0.001633, 0.001354, 0.001214, 0.001186, 0.001077, 0.001128, 0.001287, 0.001269, 0.001177, 0.001125, 0.001074, 0.000936, 0.000751, 0.000590 };

//response function of IRAC Channel 2 (= 4.493 microns)
//cf. http://ssc.spitzer.caltech.edu/irac/rsrf/080924ch2trans_full.txt
static double wavelengths_IRAC_ch2[] = { 3.722490, 3.725160, 3.727840, 3.730520, 3.733210, 3.735900, 3.738590, 3.741290, 3.743990, 3.746690, 3.749400, 3.752120, 3.754830, 3.757550, 3.760280, 3.763010, 3.765740, 3.768480, 3.771220, 3.773960, 3.776710, 3.779460, 3.782220, 3.784980, 3.787750, 3.790510, 3.793290, 3.796060, 3.798840, 3.801630, 3.804420, 3.807210, 3.810010, 3.812810, 3.815620, 3.818430, 3.821240, 3.824060, 3.826880, 3.829710, 3.832540, 3.835370, 3.838210, 3.841050, 3.843900, 3.846750, 3.849610, 3.852470, 3.855330, 3.858200, 3.861070, 3.863950, 3.866830, 3.869720, 3.872610, 3.875500, 3.878400, 3.881300, 3.884210, 3.887120, 3.890040, 3.892960, 3.895890, 3.898810, 3.901750, 3.904690, 3.907630, 3.910580, 3.913530, 3.916480, 3.919440, 3.922410, 3.925380, 3.928350, 3.931330, 3.934310, 3.937300, 3.940290, 3.943290, 3.946290, 3.949290, 3.952300, 3.955320, 3.958340, 3.961360, 3.964390, 3.967420, 3.970460, 3.973500, 3.976550, 3.979600, 3.982660, 3.985720, 3.988790, 3.991860, 3.994930, 3.998010, 4.001100, 4.004190, 4.007280, 4.010380, 4.013490, 4.016590, 4.019710, 4.022830, 4.025950, 4.029080, 4.032210, 4.035350, 4.038490, 4.041640, 4.044790, 4.047950, 4.051110, 4.054280, 4.057450, 4.060630, 4.063810, 4.067000, 4.070190, 4.073390, 4.076590, 4.079800, 4.083010, 4.086230, 4.089450, 4.092680, 4.095910, 4.099150, 4.102390, 4.105640, 4.108890, 4.112150, 4.115420, 4.118680, 4.121960, 4.125240, 4.128520, 4.131810, 4.135110, 4.138410, 4.141710, 4.145020, 4.148340, 4.151660, 4.154990, 4.158320, 4.161660, 4.165000, 4.168350, 4.171700, 4.175060, 4.178420, 4.181790, 4.185170, 4.188550, 4.191930, 4.195330, 4.198720, 4.202130, 4.205530, 4.208950, 4.212370, 4.215790, 4.219220, 4.222660, 4.226100, 4.229550, 4.233000, 4.236460, 4.239920, 4.243390, 4.246870, 4.250350, 4.253830, 4.257330, 4.260820, 4.264330, 4.267840, 4.271350, 4.274870, 4.278400, 4.281930, 4.285470, 4.289020, 4.292570, 4.296130, 4.299690, 4.303260, 4.306830, 4.310410, 4.314000, 4.317590, 4.321190, 4.324790, 4.328400, 4.332020, 4.335640, 4.339270, 4.342900, 4.346540, 4.350190, 4.353840, 4.357500, 4.361160, 4.364830, 4.368510, 4.372190, 4.375880, 4.379580, 4.383280, 4.386990, 4.390710, 4.394430, 4.398150, 4.401890, 4.405630, 4.409370, 4.413130, 4.416890, 4.420650, 4.424420, 4.428200, 4.431990, 4.435780, 4.439570, 4.443380, 4.447190, 4.451010, 4.454830, 4.458660, 4.462500, 4.466340, 4.470190, 4.474050, 4.477910, 4.481780, 4.485660, 4.489540, 4.493430, 4.497330, 4.501240, 4.505150, 4.509060, 4.512990, 4.516920, 4.520860, 4.524800, 4.528750, 4.532710, 4.536680, 4.540650, 4.544630, 4.548620, 4.552610, 4.556610, 4.560620, 4.564630, 4.568650, 4.572680, 4.576720, 4.580760, 4.584810, 4.588870, 4.592930, 4.597010, 4.601090, 4.605170, 4.609270, 4.613370, 4.617470, 4.621590, 4.625710, 4.629840, 4.633980, 4.638120, 4.642280, 4.646440, 4.650600, 4.654780, 4.658960, 4.663150, 4.667350, 4.671550, 4.675760, 4.679980, 4.684210, 4.688450, 4.692690, 4.696940, 4.701200, 4.705470, 4.709740, 4.714020, 4.718310, 4.722610, 4.726910, 4.731230, 4.735550, 4.739870, 4.744210, 4.748560, 4.752910, 4.757270, 4.761640, 4.766010, 4.770400, 4.774790, 4.779190, 4.783600, 4.788020, 4.792440, 4.796880, 4.801320, 4.805770, 4.810230, 4.814690, 4.819170, 4.823650, 4.828140, 4.832640, 4.837150, 4.841660, 4.846190, 4.850720, 4.855270, 4.859820, 4.864370, 4.868940, 4.873520, 4.878100, 4.882700, 4.887300, 4.891910, 4.896530, 4.901160, 4.905790, 4.910440, 4.915090, 4.919760, 4.924430, 4.929110, 4.933800, 4.938500, 4.943210, 4.947920, 4.952650, 4.957380, 4.962130, 4.966880, 4.971640, 4.976410, 4.981190, 4.985980, 4.990780, 4.995590, 5.000410, 5.005230, 5.010070, 5.014920, 5.019770, 5.024630, 5.029510, 5.034390, 5.039280, 5.044190, 5.049100, 5.054020, 5.058950, 5.063890, 5.068840, 5.073800, 5.078770, 5.083750, 5.088740, 5.093740, 5.098740, 5.103760, 5.108790, 5.113830, 5.118880, 5.123940, 5.129000, 5.134080, 5.139170, 5.144270, 5.149380, 5.154500, 5.159630, 5.164760, 5.169910, 5.175070, 5.180240, 5.185420, 5.190610, 5.195810, 5.201030, 5.206250, 5.211480, 5.216720, 5.221980 };

static double responses_IRAC_ch2[] = { 0.001201, 0.001099, 0.001117, 0.001213, 0.001211, 0.001253, 0.001231, 0.001209, 0.001237, 0.001197, 0.001128, 0.001091, 0.001037, 0.000956, 0.000858, 0.000717, 0.000602, 0.000578, 0.000587, 0.000474, 0.000377, 0.000317, 0.000233, 0.000230, 0.000157, 0.000228, 0.000424, 0.000474, 0.000563, 0.000633, 0.000451, 0.000464, 0.000850, 0.000942, 0.000812, 0.001039, 0.001136, 0.001040, 0.001322, 0.001361, 0.001194, 0.001184, 0.001108, 0.001127, 0.001191, 0.001142, 0.001138, 0.000946, 0.000972, 0.001021, 0.000773, 0.000693, 0.000647, 0.000523, 0.000451, 0.000366, 0.000398, 0.000391, 0.000223, 0.000226, 0.000307, 0.000401, 0.000664, 0.001206, 0.001624, 0.001920, 0.002697, 0.003559, 0.004236, 0.005163, 0.006273, 0.007327, 0.008786, 0.010680, 0.012370, 0.014320, 0.016680, 0.019370, 0.022320, 0.025810, 0.029940, 0.034790, 0.040240, 0.046900, 0.054810, 0.063810, 0.074360, 0.086690, 0.101000, 0.117500, 0.135800, 0.157300, 0.179300, 0.202300, 0.228100, 0.252200, 0.277500, 0.300400, 0.320700, 0.339000, 0.355000, 0.366900, 0.375500, 0.380500, 0.383700, 0.385400, 0.384600, 0.382400, 0.379800, 0.378100, 0.374300, 0.369500, 0.365700, 0.360700, 0.356800, 0.353100, 0.348800, 0.344300, 0.340200, 0.336700, 0.333700, 0.330800, 0.328300, 0.326800, 0.326200, 0.325400, 0.324900, 0.325100, 0.326000, 0.328300, 0.330300, 0.332400, 0.335100, 0.338600, 0.344800, 0.350700, 0.355200, 0.361700, 0.368900, 0.376400, 0.383800, 0.391600, 0.399500, 0.408500, 0.418100, 0.426900, 0.434900, 0.441100, 0.447300, 0.454500, 0.460500, 0.466000, 0.470900, 0.475500, 0.479800, 0.484100, 0.488500, 0.490800, 0.492200, 0.494800, 0.496700, 0.497200, 0.497400, 0.497000, 0.497200, 0.496300, 0.494200, 0.492300, 0.490400, 0.488300, 0.487300, 0.484700, 0.480500, 0.477300, 0.474900, 0.472800, 0.470400, 0.468000, 0.467400, 0.466400, 0.464600, 0.465100, 0.465900, 0.465700, 0.466200, 0.467700, 0.471400, 0.474400, 0.477300, 0.480700, 0.483200, 0.486400, 0.490200, 0.492900, 0.495400, 0.498300, 0.501400, 0.504600, 0.506900, 0.509000, 0.510800, 0.512800, 0.514800, 0.515600, 0.516200, 0.519400, 0.522800, 0.523700, 0.525200, 0.527900, 0.529900, 0.531300, 0.533600, 0.536800, 0.539100, 0.540700, 0.542300, 0.543800, 0.545900, 0.547300, 0.547000, 0.547100, 0.547900, 0.548000, 0.548100, 0.548100, 0.546400, 0.546200, 0.546700, 0.544300, 0.541900, 0.541700, 0.541800, 0.540000, 0.537500, 0.536500, 0.535100, 0.532300, 0.531000, 0.529700, 0.526600, 0.523500, 0.521800, 0.519100, 0.516500, 0.515500, 0.513500, 0.511000, 0.509900, 0.508200, 0.506700, 0.506900, 0.506900, 0.505200, 0.504000, 0.503700, 0.503200, 0.503400, 0.503200, 0.501800, 0.500600, 0.499800, 0.498100, 0.495500, 0.493900, 0.493000, 0.491100, 0.488900, 0.486000, 0.483600, 0.481200, 0.477700, 0.475200, 0.472500, 0.469700, 0.470500, 0.471700, 0.472600, 0.474400, 0.475100, 0.476500, 0.479700, 0.482600, 0.484500, 0.486300, 0.488900, 0.491000, 0.492300, 0.494100, 0.495500, 0.497000, 0.498300, 0.498500, 0.497900, 0.496600, 0.494600, 0.493800, 0.492300, 0.489100, 0.485300, 0.483300, 0.480500, 0.476700, 0.473800, 0.470700, 0.467100, 0.464800, 0.462200, 0.458200, 0.454300, 0.451300, 0.449600, 0.448500, 0.446700, 0.445200, 0.443600, 0.442100, 0.442100, 0.442100, 0.440500, 0.439900, 0.441000, 0.441100, 0.440500, 0.440900, 0.441000, 0.440600, 0.441100, 0.441000, 0.441100, 0.441400, 0.441800, 0.443500, 0.444100, 0.444600, 0.445400, 0.446100, 0.446000, 0.443800, 0.441900, 0.439100, 0.434400, 0.427100, 0.418700, 0.410800, 0.402300, 0.393600, 0.386100, 0.380000, 0.376400, 0.374300, 0.372600, 0.371600, 0.372800, 0.368600, 0.356200, 0.330300, 0.293200, 0.247800, 0.192700, 0.139000, 0.096840, 0.065350, 0.042360, 0.027350, 0.017490, 0.010810, 0.006694, 0.003758, 0.001993, 0.000901, 0.000591, 0.000486, 0.000303, 0.000300, 0.000369, 0.000303, 0.000205, 0.000180, 0.000096, 0.000108, 0.000118, 0.000190, 0.000274, 0.000265, 0.000305, 0.000315, 0.000283, 0.000371, 0.000458, 0.000466, 0.000460, 0.000500, 0.000489, 0.000411, 0.000421, 0.000477, 0.000431, 0.000384, 0.000402, 0.000386 };

//response function of IRAC Channel 3 (= 5.731 microns)
//cf. http://ssc.spitzer.caltech.edu/irac/rsrf/080924ch3trans_full.txt
static double wavelengths_IRAC_ch3[] = { 4.744210, 4.748560, 4.752910, 4.757270, 4.761640, 4.766010, 4.770400, 4.774790, 4.779190, 4.783600, 4.788020, 4.792440, 4.796880, 4.801320, 4.805770, 4.810230, 4.814690, 4.819170, 4.823650, 4.828140, 4.832640, 4.837150, 4.841660, 4.846190, 4.850720, 4.855270, 4.859820, 4.864370, 4.868940, 4.873520, 4.878100, 4.882700, 4.887300, 4.891910, 4.896530, 4.901160, 4.905790, 4.910440, 4.915090, 4.919760, 4.924430, 4.929110, 4.933800, 4.938500, 4.943210, 4.947920, 4.952650, 4.957380, 4.962130, 4.966880, 4.971640, 4.976410, 4.981190, 4.985980, 4.990780, 4.995590, 5.000410, 5.005230, 5.010070, 5.014920, 5.019770, 5.024630, 5.029510, 5.034390, 5.039280, 5.044190, 5.049100, 5.054020, 5.058950, 5.063890, 5.068840, 5.073800, 5.078770, 5.083750, 5.088740, 5.093740, 5.098740, 5.103760, 5.108790, 5.113830, 5.118880, 5.123940, 5.129000, 5.134080, 5.139170, 5.144270, 5.149380, 5.154500, 5.159630, 5.164760, 5.169910, 5.175070, 5.180240, 5.185420, 5.190610, 5.195810, 5.201030, 5.206250, 5.211480, 5.216720, 5.221980, 5.227240, 5.232520, 5.237800, 5.243100, 5.248400, 5.253720, 5.259050, 5.264390, 5.269740, 5.275100, 5.280470, 5.285850, 5.291250, 5.296650, 5.302070, 5.307500, 5.312930, 5.318380, 5.323840, 5.329310, 5.334800, 5.340290, 5.345800, 5.351310, 5.356840, 5.362380, 5.367930, 5.373500, 5.379070, 5.384660, 5.390250, 5.395860, 5.401480, 5.407110, 5.412760, 5.418420, 5.424080, 5.429760, 5.435450, 5.441160, 5.446870, 5.452600, 5.458340, 5.464090, 5.469860, 5.475630, 5.481420, 5.487220, 5.493030, 5.498860, 5.504700, 5.510550, 5.516410, 5.522280, 5.528170, 5.534070, 5.539980, 5.545910, 5.551840, 5.557800, 5.563760, 5.569730, 5.575720, 5.581730, 5.587740, 5.593770, 5.599810, 5.605860, 5.611930, 5.618010, 5.624100, 5.630210, 5.636330, 5.642460, 5.648610, 5.654770, 5.660940, 5.667130, 5.673330, 5.679540, 5.685770, 5.692010, 5.698270, 5.704540, 5.710820, 5.717110, 5.723430, 5.729750, 5.736090, 5.742440, 5.748810, 5.755190, 5.761580, 5.767990, 5.774410, 5.780850, 5.787300, 5.793770, 5.800250, 5.806740, 5.813250, 5.819780, 5.826320, 5.832870, 5.839440, 5.846020, 5.852620, 5.859240, 5.865860, 5.872510, 5.879160, 5.885840, 5.892530, 5.899230, 5.905950, 5.912680, 5.919430, 5.926200, 5.932980, 5.939770, 5.946590, 5.953410, 5.960260, 5.967120, 5.973990, 5.980880, 5.987790, 5.994710, 6.001650, 6.008600, 6.015570, 6.022560, 6.029560, 6.036580, 6.043620, 6.050670, 6.057740, 6.064820, 6.071920, 6.079040, 6.086180, 6.093330, 6.100500, 6.107680, 6.114890, 6.122110, 6.129340, 6.136600, 6.143870, 6.151150, 6.158460, 6.165780, 6.173120, 6.180480, 6.187860, 6.195250, 6.202660, 6.210090, 6.217530, 6.225000, 6.232480, 6.239980, 6.247500, 6.255030, 6.262590, 6.270160, 6.277750, 6.285360, 6.292990, 6.300640, 6.308300, 6.315980, 6.323690, 6.331410, 6.339150, 6.346910, 6.354690, 6.362480, 6.370300, 6.378130, 6.385990, 6.393860, 6.401760, 6.409670, 6.417600, 6.425560, 6.433530, 6.441520, 6.449530, 6.457560, 6.465610, 6.473690, 6.481780, 6.489890, 6.498020, 6.506180, 6.514350, 6.522540, 6.530760, 6.539000, 6.547250, 6.555530, 6.563830, 6.572150, 6.580490, 6.588850, 6.597230, 6.605630, 6.614060, 6.622510 };

static double responses_IRAC_ch3[] = { 0.000091, 0.000089, 0.000082, 0.000073, 0.000067, 0.000071, 0.000080, 0.000077, 0.000076, 0.000084, 0.000078, 0.000059, 0.000058, 0.000064, 0.000064, 0.000059, 0.000062, 0.000074, 0.000079, 0.000074, 0.000057, 0.000057, 0.000071, 0.000087, 0.000108, 0.000128, 0.000146, 0.000182, 0.000249, 0.000319, 0.000330, 0.000427, 0.000524, 0.000716, 0.001192, 0.001799, 0.002635, 0.003611, 0.004625, 0.005849, 0.007203, 0.008569, 0.010520, 0.012950, 0.015910, 0.019330, 0.022430, 0.026050, 0.029580, 0.032980, 0.036370, 0.039890, 0.043590, 0.047340, 0.051020, 0.055470, 0.058670, 0.062560, 0.065920, 0.068730, 0.070920, 0.073090, 0.074520, 0.076020, 0.077410, 0.078520, 0.079900, 0.081020, 0.082370, 0.083830, 0.085330, 0.087040, 0.089250, 0.091120, 0.093340, 0.095470, 0.097050, 0.098150, 0.099230, 0.100200, 0.100900, 0.101700, 0.102400, 0.102900, 0.103400, 0.103700, 0.103800, 0.103800, 0.103900, 0.104000, 0.104300, 0.104800, 0.105300, 0.105900, 0.106600, 0.107200, 0.108000, 0.108800, 0.109500, 0.110200, 0.110900, 0.111500, 0.112100, 0.112700, 0.112900, 0.112900, 0.112300, 0.111600, 0.111000, 0.110200, 0.109500, 0.109200, 0.109300, 0.109900, 0.110600, 0.111100, 0.111900, 0.112600, 0.113500, 0.114500, 0.115600, 0.116500, 0.117600, 0.118600, 0.119500, 0.120300, 0.121000, 0.121600, 0.122200, 0.122700, 0.122900, 0.122900, 0.122900, 0.122800, 0.122600, 0.122500, 0.122100, 0.122000, 0.121900, 0.121700, 0.121700, 0.121600, 0.121700, 0.121800, 0.121900, 0.121800, 0.121900, 0.121800, 0.121900, 0.121700, 0.121700, 0.121800, 0.122000, 0.122600, 0.123200, 0.123900, 0.124500, 0.125300, 0.126100, 0.126800, 0.127500, 0.128200, 0.128900, 0.129600, 0.129600, 0.129400, 0.129200, 0.128900, 0.128800, 0.128800, 0.129000, 0.129600, 0.130300, 0.131100, 0.131800, 0.132400, 0.133000, 0.133500, 0.134000, 0.134400, 0.134300, 0.134200, 0.134100, 0.134100, 0.134300, 0.134900, 0.135400, 0.135900, 0.136400, 0.136800, 0.137000, 0.137400, 0.137600, 0.137400, 0.136600, 0.136000, 0.135200, 0.134800, 0.134800, 0.135300, 0.135800, 0.136300, 0.137000, 0.137600, 0.138100, 0.138600, 0.139000, 0.139300, 0.139700, 0.139600, 0.139700, 0.139700, 0.139700, 0.139800, 0.140100, 0.140300, 0.140600, 0.140900, 0.141300, 0.141600, 0.141700, 0.141900, 0.142000, 0.142000, 0.142100, 0.142000, 0.142000, 0.142100, 0.142000, 0.141900, 0.141600, 0.141500, 0.141500, 0.141700, 0.141700, 0.141800, 0.141900, 0.141900, 0.141800, 0.142000, 0.142000, 0.141600, 0.141000, 0.140100, 0.139200, 0.138200, 0.137400, 0.136800, 0.136100, 0.135700, 0.135400, 0.135200, 0.135200, 0.135000, 0.134700, 0.134700, 0.134100, 0.133300, 0.132300, 0.130900, 0.129200, 0.127800, 0.126300, 0.125300, 0.124900, 0.124500, 0.124400, 0.124600, 0.124800, 0.125100, 0.125400, 0.125200, 0.125000, 0.123500, 0.122300, 0.120000, 0.117600, 0.114800, 0.109300, 0.103600, 0.097200, 0.090830, 0.084630, 0.079400, 0.072560, 0.064980, 0.057960, 0.049720, 0.041420, 0.032760, 0.025500, 0.018990, 0.013390, 0.009109, 0.005789, 0.003272, 0.001720, 0.000820, 0.000371, 0.000125, 0.000061, 0.000045, 0.000030, 0.000029, 0.000026, 0.000006, 0.000012, 0.000027, 0.000032, 0.000051, 0.000065 };

//response function of IRAC Channel 4 (= 7.872 microns)
//cf. http://ssc.spitzer.caltech.edu/irac/rsrf/080924ch4trans_full.txt
static double wavelengths_IRAC_ch4[] = { 6.151150, 6.158460, 6.165780, 6.173120, 6.180480, 6.187860, 6.195250, 6.202660, 6.210090, 6.217530, 6.225000, 6.232480, 6.239980, 6.247500, 6.255030, 6.262590, 6.270160, 6.277750, 6.285360, 6.292990, 6.300640, 6.308300, 6.315980, 6.323690, 6.331410, 6.339150, 6.346910, 6.354690, 6.362480, 6.370300, 6.378130, 6.385990, 6.393860, 6.401760, 6.409670, 6.417600, 6.425560, 6.433530, 6.441520, 6.449530, 6.457560, 6.465610, 6.473690, 6.481780, 6.489890, 6.498020, 6.506180, 6.514350, 6.522540, 6.530760, 6.539000, 6.547250, 6.555530, 6.563830, 6.572150, 6.580490, 6.588850, 6.597230, 6.605630, 6.614060, 6.622510, 6.630980, 6.639470, 6.647980, 6.656510, 6.665070, 6.673650, 6.682250, 6.690870, 6.699510, 6.708180, 6.716870, 6.725580, 6.734320, 6.743070, 6.751850, 6.760660, 6.769480, 6.778330, 6.787200, 6.796100, 6.805020, 6.813960, 6.822930, 6.831910, 6.840930, 6.849960, 6.859030, 6.868110, 6.877220, 6.886350, 6.895510, 6.904690, 6.913900, 6.923130, 6.932380, 6.941660, 6.950970, 6.960300, 6.969650, 6.979040, 6.988440, 6.997870, 7.007330, 7.016810, 7.026320, 7.035850, 7.045410, 7.055000, 7.064610, 7.074250, 7.083910, 7.093600, 7.103320, 7.113060, 7.122830, 7.132630, 7.142460, 7.152310, 7.162190, 7.172090, 7.182030, 7.191990, 7.201980, 7.211990, 7.222040, 7.232110, 7.242210, 7.252340, 7.262500, 7.272680, 7.282900, 7.293140, 7.303410, 7.313710, 7.324040, 7.334400, 7.344790, 7.355210, 7.365660, 7.376140, 7.386640, 7.397180, 7.407750, 7.418350, 7.428970, 7.439630, 7.450320, 7.461040, 7.471790, 7.482570, 7.493390, 7.504230, 7.515110, 7.526010, 7.536950, 7.547920, 7.558930, 7.569960, 7.581030, 7.592130, 7.603260, 7.614420, 7.625620, 7.636850, 7.648120, 7.659410, 7.670740, 7.682110, 7.693510, 7.704940, 7.716400, 7.727900, 7.739440, 7.751010, 7.762610, 7.774250, 7.785920, 7.797630, 7.809370, 7.821150, 7.832970, 7.844820, 7.856700, 7.868620, 7.880580, 7.892580, 7.904610, 7.916680, 7.928780, 7.940920, 7.953100, 7.965320, 7.977570, 7.989870, 8.002200, 8.014560, 8.026970, 8.039420, 8.051900, 8.064420, 8.076980, 8.089580, 8.102220, 8.114900, 8.127620, 8.140380, 8.153180, 8.166020, 8.178900, 8.191820, 8.204780, 8.217790, 8.230830, 8.243920, 8.257040, 8.270210, 8.283420, 8.296680, 8.309970, 8.323310, 8.336690, 8.350120, 8.363590, 8.377100, 8.390650, 8.404250, 8.417890, 8.431580, 8.445310, 8.459090, 8.472910, 8.486780, 8.500690, 8.514650, 8.528660, 8.542710, 8.556800, 8.570950, 8.585140, 8.599380, 8.613660, 8.627990, 8.642370, 8.656800, 8.671280, 8.685800, 8.700370, 8.715000, 8.729670, 8.744390, 8.759160, 8.773980, 8.788850, 8.803770, 8.818750, 8.833770, 8.848850, 8.863970, 8.879150, 8.894380, 8.909660, 8.925000, 8.940380, 8.955830, 8.971320, 8.986870, 9.002470, 9.018130, 9.033840, 9.049600, 9.065430, 9.081300, 9.097230, 9.113220, 9.129270, 9.145370, 9.161520, 9.177740, 9.194010, 9.210340, 9.226730, 9.243180, 9.259680, 9.276250, 9.292870, 9.309560, 9.326300, 9.343100, 9.359970, 9.376900, 9.393880, 9.410930, 9.428040, 9.445220, 9.462450, 9.479750, 9.497110, 9.514540, 9.532030, 9.549580, 9.567200, 9.584890, 9.602640, 9.620450, 9.638330, 9.656280, 9.674300, 9.692380, 9.710530, 9.728750, 9.747040, 9.765390, 9.783820, 9.802310, 9.820880, 9.839510, 9.858220, 9.877000, 9.895850, 9.914770, 9.933760, 9.952830, 9.971970, 9.991180, 10.010500, 10.029800, 10.049300, 10.068800, 10.088400, 10.108000, 10.127800, 10.147600, 10.167500, 10.187500, 10.207500, 10.227700, 10.247900, 10.268200, 10.288500, 10.309000, 10.329500, 10.350100, 10.370800, 10.391600, 10.412500, 10.433400, 10.454500, 10.475600, 10.496800 };

static double responses_IRAC_ch4[] = { 0.000071, 0.000124, 0.000188, 0.000206, 0.000180, 0.000147, 0.000096, 0.000050, 0.000083, 0.000123, 0.000147, 0.000198, 0.000228, 0.000231, 0.000232, 0.000287, 0.000471, 0.000768, 0.001189, 0.002016, 0.003362, 0.005239, 0.007906, 0.011740, 0.016260, 0.021640, 0.028570, 0.036160, 0.043950, 0.053290, 0.062440, 0.073090, 0.085940, 0.100400, 0.112900, 0.125500, 0.137800, 0.148500, 0.158900, 0.167100, 0.174000, 0.179300, 0.184800, 0.189800, 0.197100, 0.204900, 0.211700, 0.217000, 0.219900, 0.221500, 0.224000, 0.227200, 0.229500, 0.231300, 0.232600, 0.232800, 0.232900, 0.233500, 0.233100, 0.232500, 0.230100, 0.228000, 0.226100, 0.223700, 0.222600, 0.221600, 0.222000, 0.223600, 0.226200, 0.228600, 0.231000, 0.233000, 0.234700, 0.236000, 0.237200, 0.237800, 0.239300, 0.240600, 0.241800, 0.242900, 0.244000, 0.244800, 0.246100, 0.247100, 0.248100, 0.248500, 0.249100, 0.249400, 0.249200, 0.248800, 0.248300, 0.247700, 0.247300, 0.247600, 0.248500, 0.249200, 0.249100, 0.248800, 0.247900, 0.246900, 0.245000, 0.243400, 0.242400, 0.241800, 0.241800, 0.241400, 0.241000, 0.240900, 0.240300, 0.239600, 0.239200, 0.239600, 0.240300, 0.241100, 0.241800, 0.242200, 0.242100, 0.241700, 0.241300, 0.240700, 0.240800, 0.241800, 0.243300, 0.244700, 0.246000, 0.247700, 0.249300, 0.249700, 0.249400, 0.248300, 0.246200, 0.243800, 0.242700, 0.242000, 0.242800, 0.244200, 0.246800, 0.249500, 0.252600, 0.254300, 0.255600, 0.256300, 0.255600, 0.254700, 0.253700, 0.253000, 0.253900, 0.255900, 0.259100, 0.262900, 0.266500, 0.270000, 0.272800, 0.275500, 0.277800, 0.279600, 0.280900, 0.282200, 0.283000, 0.283100, 0.282600, 0.281600, 0.281300, 0.281400, 0.282100, 0.283700, 0.285700, 0.287200, 0.288100, 0.288300, 0.287200, 0.286600, 0.285700, 0.285900, 0.286700, 0.287900, 0.289100, 0.290600, 0.292300, 0.293900, 0.295300, 0.297100, 0.299000, 0.300700, 0.301600, 0.302200, 0.301400, 0.300200, 0.298000, 0.296100, 0.295200, 0.294800, 0.295700, 0.296700, 0.297700, 0.299000, 0.300200, 0.301300, 0.302400, 0.303200, 0.305000, 0.306100, 0.308000, 0.308900, 0.309000, 0.309100, 0.308600, 0.308100, 0.307900, 0.308500, 0.309500, 0.311300, 0.312700, 0.313700, 0.313700, 0.313700, 0.313400, 0.312800, 0.312500, 0.312800, 0.312500, 0.311900, 0.310800, 0.309900, 0.309400, 0.309500, 0.310100, 0.311700, 0.313000, 0.313600, 0.314000, 0.313700, 0.312400, 0.311300, 0.310900, 0.311200, 0.311200, 0.311700, 0.312600, 0.312200, 0.312100, 0.310200, 0.308500, 0.306000, 0.302600, 0.298100, 0.294300, 0.290900, 0.289200, 0.289800, 0.291600, 0.293800, 0.295800, 0.297300, 0.298400, 0.298100, 0.296500, 0.293900, 0.291400, 0.288900, 0.287500, 0.285700, 0.284100, 0.282700, 0.280600, 0.278100, 0.275600, 0.273700, 0.271300, 0.268600, 0.265900, 0.264100, 0.261600, 0.257800, 0.253600, 0.249700, 0.242900, 0.234500, 0.224200, 0.214100, 0.201500, 0.189800, 0.177400, 0.165300, 0.153400, 0.143700, 0.133400, 0.123500, 0.113200, 0.102200, 0.090730, 0.079150, 0.067830, 0.056070, 0.045780, 0.036040, 0.027390, 0.020150, 0.014450, 0.010210, 0.007234, 0.004910, 0.003291, 0.002300, 0.001616, 0.001144, 0.000818, 0.000510, 0.000279, 0.000166, 0.000118, 0.000090, 0.000115, 0.000134, 0.000066, 0.000048, 0.000095, 0.000102, 0.000164, 0.000299, 0.000334, 0.000325, 0.000320, 0.000276, 0.000291, 0.000274, 0.000161, 0.000157, 0.000208, 0.000188, 0.000145, 0.000160, 0.000233, 0.000289, 0.000264, 0.000182, 0.000088, 0.000047, 0.000114, 0.000213, 0.000245, 0.000214, 0.000196, 0.000202, 0.000230, 0.000273, 0.000271, 0.000259, 0.000252, 0.000190 };



//--------------------------------------------------------------------------------------

/*SPITZER MIPS RESPONSE FUNCTIONS FOR FULL ARRAYS (new curves)
 ------------------------------------------------------------
 see http://irsa.ipac.caltech.edu/data/SPITZER/docs/mips/calibrationfiles/spectralresponse/ */
static double lower_limits_MIPS[] = { 18.005, 49.95998, 100.0851 };
static double upper_limits_MIPS[] = { 32.207, 111.0222, 199.92 };
static double i_max_MIPS[] = { 128, 111, 400 };

//response function of MIPS 24 um (= 23.68 microns)
static double wavelengths_MIPS_24[] = { 18.005000, 18.068000, 18.131000, 18.194000, 18.258000, 18.323000, 18.388000, 18.453000, 18.519000, 18.586000, 18.652000, 18.720000, 18.788000, 18.856000, 18.925000, 18.994000, 19.064000, 19.134000, 19.205000, 19.277000, 19.348000, 19.421000, 19.494000, 19.567000, 19.642000, 19.716000, 19.792000, 19.867000, 19.944000, 20.021000, 20.098000, 20.177000, 20.255000, 20.335000, 20.415000, 20.496000, 20.577000, 20.659000, 20.742000, 20.825000, 20.909000, 20.993000, 21.079000, 21.165000, 21.252000, 21.339000, 21.427000, 21.516000, 21.606000, 21.696000, 21.787000, 21.879000, 21.972000, 22.065000, 22.160000, 22.255000, 22.351000, 22.448000, 22.545000, 22.644000, 22.743000, 22.843000, 22.944000, 23.046000, 23.149000, 23.253000, 23.358000, 23.463000, 23.570000, 23.678000, 23.786000, 23.896000, 24.006000, 24.118000, 24.231000, 24.345000, 24.459000, 24.575000, 24.692000, 24.810000, 24.930000, 25.050000, 25.172000, 25.295000, 25.419000, 25.544000, 25.670000, 25.798000, 25.927000, 26.057000, 26.189000, 26.322000, 26.456000, 26.592000, 26.729000, 26.867000, 27.007000, 27.149000, 27.292000, 27.436000, 27.582000, 27.729000, 27.878000, 28.029000, 28.181000, 28.335000, 28.491000, 28.649000, 28.808000, 28.969000, 29.131000, 29.296000, 29.462000, 29.631000, 29.801000, 29.973000, 30.148000, 30.324000, 30.502000, 30.683000, 30.865000, 31.050000, 31.237000, 31.427000, 31.618000, 31.812000, 32.009000, 32.207000 };

static double responses_MIPS_24[] = { 0.000237, 0.000231, 0.000173, 0.000012, 0.000229, 0.000228, 0.000237, 0.000241, 0.000245, 0.000573, 0.000595, 0.000401, 0.000135, 0.000275, 0.000277, 0.000185, 0.000190, 0.000644, 0.000764, 0.000557, 0.000657, 0.000736, 0.001573, 0.002129, 0.003627, 0.004662, 0.006710, 0.008835, 0.012914, 0.014500, 0.019532, 0.024468, 0.031953, 0.050973, 0.076447, 0.120929, 0.177656, 0.252554, 0.377777, 0.528659, 0.735924, 0.813463, 0.857335, 0.882477, 0.907091, 0.932828, 0.957009, 0.973634, 0.984957, 0.991663, 0.997749, 1.000000, 0.998522, 0.988564, 0.970058, 0.935205, 0.926258, 0.899796, 0.880798, 0.865925, 0.856114, 0.857699, 0.856779, 0.850509, 0.834520, 0.815473, 0.795473, 0.775875, 0.752764, 0.746808, 0.777653, 0.798943, 0.839877, 0.876265, 0.911819, 0.929431, 0.924876, 0.917978, 0.897806, 0.879948, 0.859096, 0.833534, 0.803216, 0.770890, 0.736609, 0.695704, 0.649479, 0.602661, 0.558191, 0.519174, 0.486209, 0.455974, 0.428693, 0.406171, 0.381986, 0.354378, 0.326682, 0.296838, 0.261178, 0.225878, 0.195445, 0.170226, 0.148445, 0.130555, 0.117945, 0.107676, 0.097827, 0.088869, 0.080512, 0.072124, 0.060997, 0.051086, 0.042525, 0.035384, 0.029764, 0.025596, 0.021807, 0.019190, 0.016606, 0.013779, 0.011002, 0.008476, 0.006381, 0.004758, 0.003471, 0.002394, 0.001482, 0.000727 };

//response function of MIPS 70 um (= 71.42 microns)
static double wavelengths_MIPS_70[] = { 49.959980, 50.211040, 50.464630, 50.720800, 50.979580, 51.241010, 51.505140, 51.772000, 52.041650, 52.314120, 52.589460, 52.867710, 53.148920, 53.433140, 53.720410, 54.010790, 54.304330, 54.601080, 54.901080, 55.204400, 55.511090, 55.821210, 56.134810, 56.451960, 56.772710, 57.097130, 57.425270, 57.757210, 58.093010, 58.432730, 58.776450, 59.124240, 59.476170, 59.832320, 60.192750, 60.557560, 60.926810, 61.300600, 61.678990, 62.062090, 62.449980, 62.842750, 63.240490, 63.643290, 64.051260, 64.464500, 64.883100, 65.307170, 65.736820, 66.172170, 66.613310, 67.060380, 67.513490, 67.972770, 68.438340, 68.910320, 69.388870, 69.874110, 70.366180, 70.865230, 71.371410, 71.884870, 72.405780, 72.934290, 73.470570, 74.014790, 74.567140, 75.127800, 75.696950, 76.274790, 76.861520, 77.457340, 78.062480, 78.677140, 79.301570, 79.935980, 80.580620, 81.235750, 81.901620, 82.578490, 83.266640, 83.966360, 84.677940, 85.401690, 86.137910, 86.886930, 87.649100, 88.424750, 89.214260, 90.017990, 90.836340, 91.669700, 92.518490, 93.383150, 94.264130, 95.161880, 96.076900, 97.009680, 97.960760, 98.930670, 99.919970, 100.929300, 101.959200, 103.010300, 104.083300, 105.178900, 106.297800, 107.440800, 108.608700, 109.802200, 111.022200 };

static double responses_MIPS_70[] = { -0.000290, 0.000066, 0.000866, 0.001816, 0.002936, 0.004346, 0.006087, 0.008170, 0.010677, 0.014090, 0.018454, 0.023109, 0.027443, 0.032523, 0.040173, 0.049711, 0.060504, 0.073617, 0.090147, 0.109523, 0.129620, 0.145772, 0.153541, 0.158599, 0.170037, 0.189803, 0.214929, 0.241451, 0.263499, 0.279945, 0.294817, 0.312668, 0.336648, 0.369982, 0.412077, 0.454126, 0.491189, 0.526436, 0.559559, 0.595150, 0.641587, 0.694072, 0.737970, 0.774680, 0.808052, 0.827862, 0.838341, 0.848857, 0.860528, 0.869998, 0.883175, 0.903375, 0.923421, 0.945281, 0.970016, 0.984766, 0.989037, 0.995237, 1.000000, 0.998268, 0.999989, 1.000645, 0.992201, 0.982083, 0.972578, 0.958518, 0.938603, 0.917937, 0.883038, 0.832029, 0.781721, 0.729882, 0.670221, 0.611989, 0.558421, 0.505731, 0.456761, 0.416541, 0.379062, 0.340729, 0.307558, 0.279367, 0.250857, 0.223651, 0.200818, 0.178981, 0.159608, 0.144221, 0.130385, 0.117319, 0.107147, 0.098924, 0.089555, 0.081557, 0.075779, 0.069010, 0.061375, 0.056092, 0.051865, 0.046722, 0.042140, 0.038231, 0.034554, 0.033021, 0.032990, 0.032422, 0.030687, 0.030265, 0.030992, 0.030270, 0.029350 };

/*
//response function of MIPS 160 um (= 155.9 microns)
static double wavelengths_MIPS_160[] = { 100.085100, 100.210500, 100.336300, 100.462300, 100.588700, 100.715400, 100.842400, 100.969700, 101.097400, 101.225300, 101.353600, 101.482200, 101.611200, 101.740500, 101.870100, 102.000000, 102.130300, 102.260900, 102.391800, 102.523100, 102.654700, 102.786600, 102.918900, 103.051600, 103.184500, 103.317800, 103.451500, 103.585500, 103.719900, 103.854600, 103.989600, 104.125000, 104.260800, 104.396900, 104.533400, 104.670200, 104.807400, 104.944900, 105.082800, 105.221100, 105.359700, 105.498700, 105.638100, 105.777800, 105.917900, 106.058400, 106.199200, 106.340400, 106.482000, 106.624000, 106.766400, 106.909100, 107.052200, 107.195700, 107.339600, 107.483900, 107.628600, 107.773600, 107.919000, 108.064900, 108.211100, 108.357700, 108.504800, 108.652200, 108.800000, 108.948200, 109.096900, 109.245900, 109.395400, 109.545200, 109.695500, 109.846200, 109.997300, 110.148800, 110.300700, 110.453100, 110.605800, 110.759000, 110.912600, 111.066700, 111.221200, 111.376100, 111.531400, 111.687200, 111.843400, 112.000000, 112.157100, 112.314600, 112.472600, 112.631000, 112.789900, 112.949200, 113.108900, 113.269100, 113.429800, 113.590900, 113.752500, 113.914500, 114.077100, 114.240000, 114.403500, 114.567400, 114.731700, 114.896600, 115.061900, 115.227700, 115.394000, 115.560700, 115.727900, 115.895700, 116.063900, 116.232600, 116.401800, 116.571400, 116.741600, 116.912300, 117.083500, 117.255200, 117.427300, 117.600000, 117.773200, 117.946900, 118.121100, 118.295900, 118.471100, 118.646900, 118.823200, 119.000000, 119.177400, 119.355200, 119.533700, 119.712600, 119.892100, 120.072100, 120.252700, 120.433800, 120.615400, 120.797600, 120.980400, 121.163700, 121.347500, 121.531900, 121.716900, 121.902500, 122.088600, 122.275200, 122.462500, 122.650300, 122.838700, 123.027700, 123.217300, 123.407400, 123.598200, 123.789500, 123.981400, 124.173900, 124.367000, 124.560800, 124.755100, 124.950000, 125.145600, 125.341700, 125.538500, 125.735900, 125.933900, 126.132500, 126.331800, 126.531700, 126.732200, 126.933400, 127.135200, 127.337600, 127.540700, 127.744400, 127.948800, 128.153900, 128.359600, 128.565900, 128.773000, 128.980700, 129.189000, 129.398100, 129.607800, 129.818200, 130.029300, 130.241100, 130.453500, 130.666700, 130.880500, 131.095100, 131.310400, 131.526300, 131.743000, 131.960400, 132.178500, 132.397400, 132.616900, 132.837200, 133.058300, 133.280000, 133.502500, 133.725800, 133.949800, 134.174500, 134.400000, 134.626300, 134.853300, 135.081100, 135.309700, 135.539000, 135.769100, 136.000000, 136.231700, 136.464200, 136.697500, 136.931500, 137.166400, 137.402100, 137.638600, 137.875900, 138.114000, 138.353000, 138.592700, 138.833400, 139.074800, 139.317100, 139.560200, 139.804200, 140.049100, 140.294800, 140.541300, 140.788800, 141.037100, 141.286200, 141.536300, 141.787300, 142.039100, 142.291800, 142.545500, 142.800000, 143.055500, 143.311900, 143.569100, 143.827400, 144.086500, 144.346600, 144.607600, 144.869600, 145.132500, 145.396400, 145.661200, 145.927000, 146.193800, 146.461600, 146.730300, 147.000000, 147.270700, 147.542500, 147.815200, 148.088900, 148.363700, 148.639400, 148.916200, 149.194100, 149.472900, 149.752800, 150.033800, 150.315800, 150.598900, 150.883000, 151.168300, 151.454600, 151.742000, 152.030400, 152.320000, 152.610700, 152.902500, 153.195400, 153.489500, 153.784600, 154.080900, 154.378400, 154.677000, 154.976800, 155.277700, 155.579800, 155.883100, 156.187500, 156.493200, 156.800000, 157.108100, 157.417300, 157.727800, 158.039600, 158.352500, 158.666700, 158.982100, 159.298800, 159.616800, 159.936000, 160.256500, 160.578300, 160.901400, 161.225800, 161.551500, 161.878600, 162.206900, 162.536600, 162.867600, 163.200000, 163.533800, 163.868900, 164.205400, 164.543200, 164.882500, 165.223200, 165.565200, 165.908700, 166.253700, 166.600000, 166.947800, 167.297100, 167.647800, 168.000000, 168.353700, 168.708900, 169.065600, 169.423800, 169.783500, 170.144700, 170.507500, 170.871800, 171.237700, 171.605200, 171.974200, 172.344900, 172.717100, 173.090900, 173.466400, 173.843500, 174.222300, 174.602600, 174.984700, 175.368400, 175.753900, 176.141000, 176.529800, 176.920400, 177.312700, 177.706700, 178.102500, 178.500000, 178.899400, 179.300500, 179.703400, 180.108100, 180.514700, 180.923100, 181.333400, 181.745500, 182.159500, 182.575400, 182.993200, 183.412900, 183.834500, 184.258100, 184.683600, 185.111100, 185.540600, 185.972100, 186.405600, 186.841200, 187.278700, 187.718300, 188.160000, 188.603800, 189.049700, 189.497700, 189.947800, 190.400000, 190.854400, 191.311000, 191.769800, 192.230800, 192.694000, 193.159500, 193.627100, 194.097100, 194.569400, 195.043900, 195.520800, 196.000000, 196.481600, 196.965500, 197.451900, 197.940600, 198.431800, 198.925400, 199.421500, 199.920000 };

static double responses_MIPS_160[] = { 0.000447, 0.000474, 0.000367, 0.000407, 0.000472, 0.000494, 0.000539, 0.000589, 0.000553, 0.000548, 0.000680, 0.000700, 0.000596, 0.000557, 0.000641, 0.000724, 0.000677, 0.000715, 0.000766, 0.000665, 0.000725, 0.000715, 0.000719, 0.000799, 0.000749, 0.000752, 0.000789, 0.000822, 0.000846, 0.000819, 0.000786, 0.000797, 0.000900, 0.000966, 0.000952, 0.000808, 0.000738, 0.000819, 0.000927, 0.000932, 0.000831, 0.000792, 0.000796, 0.000819, 0.000870, 0.000904, 0.000924, 0.000889, 0.000901, 0.000943, 0.000881, 0.000796, 0.000866, 0.000943, 0.000932, 0.001009, 0.000936, 0.000803, 0.000997, 0.001114, 0.001061, 0.001021, 0.000981, 0.000917, 0.000933, 0.000937, 0.000876, 0.000864, 0.000883, 0.001011, 0.001149, 0.001216, 0.001242, 0.001255, 0.001211, 0.001216, 0.001288, 0.001282, 0.001384, 0.001455, 0.001513, 0.001442, 0.001455, 0.001539, 0.001477, 0.001562, 0.001587, 0.001518, 0.001472, 0.001510, 0.001489, 0.001518, 0.001668, 0.001809, 0.001797, 0.001851, 0.001818, 0.002091, 0.002203, 0.002179, 0.002222, 0.002193, 0.002368, 0.002635, 0.002708, 0.002766, 0.003203, 0.003520, 0.003654, 0.003983, 0.004197, 0.004252, 0.004276, 0.004526, 0.004801, 0.005002, 0.005536, 0.005423, 0.005623, 0.005942, 0.006242, 0.006348, 0.006335, 0.006441, 0.006615, 0.007240, 0.007551, 0.008008, 0.008284, 0.008640, 0.008983, 0.009191, 0.009407, 0.009608, 0.009991, 0.010152, 0.010587, 0.011319, 0.011818, 0.012091, 0.012364, 0.012936, 0.013422, 0.014121, 0.014813, 0.015229, 0.016504, 0.017405, 0.017946, 0.018605, 0.019464, 0.020663, 0.021828, 0.022674, 0.023727, 0.025979, 0.027942, 0.029283, 0.030681, 0.032541, 0.034293, 0.036261, 0.038157, 0.040349, 0.043315, 0.046326, 0.049115, 0.051696, 0.054633, 0.057837, 0.060863, 0.063607, 0.066960, 0.071232, 0.076605, 0.080961, 0.085566, 0.089646, 0.094342, 0.099703, 0.104491, 0.109402, 0.114945, 0.120442, 0.127514, 0.134596, 0.138864, 0.146123, 0.150331, 0.157503, 0.162007, 0.170009, 0.174370, 0.182098, 0.187804, 0.195749, 0.200513, 0.208706, 0.213323, 0.222323, 0.226949, 0.231259, 0.239267, 0.241975, 0.249969, 0.259455, 0.268523, 0.277311, 0.285225, 0.293649, 0.302112, 0.310823, 0.318801, 0.322865, 0.334176, 0.348680, 0.356199, 0.370831, 0.385731, 0.400423, 0.414583, 0.429878, 0.445000, 0.457952, 0.465973, 0.480237, 0.495482, 0.509854, 0.532226, 0.547751, 0.562369, 0.584999, 0.608022, 0.629290, 0.645116, 0.658410, 0.671591, 0.675774, 0.688479, 0.700292, 0.702498, 0.715888, 0.728260, 0.740454, 0.741969, 0.754591, 0.757151, 0.768715, 0.770594, 0.784353, 0.786992, 0.798593, 0.804320, 0.812317, 0.813238, 0.823684, 0.834649, 0.847635, 0.859012, 0.868908, 0.879965, 0.891054, 0.898551, 0.900832, 0.912081, 0.923489, 0.933271, 0.942213, 0.951861, 0.961771, 0.972094, 0.981395, 0.994476, 0.999749, 0.999151, 0.997548, 0.995700, 0.995062, 0.993676, 1.000000, 0.998353, 0.997502, 0.995063, 0.993275, 0.992945, 0.980701, 0.977739, 0.975756, 0.965544, 0.963634, 0.960770, 0.954258, 0.957757, 0.955337, 0.952607, 0.950778, 0.959710, 0.957048, 0.954059, 0.950879, 0.949385, 0.947378, 0.946668, 0.946953, 0.947891, 0.955765, 0.953500, 0.954159, 0.956026, 0.956026, 0.964962, 0.965461, 0.965031, 0.963797, 0.953418, 0.951826, 0.949067, 0.944964, 0.931234, 0.926587, 0.920868, 0.913580, 0.898548, 0.880514, 0.861504, 0.852693, 0.833905, 0.820430, 0.797571, 0.784459, 0.759877, 0.740617, 0.711354, 0.684708, 0.657276, 0.629894, 0.610668, 0.583345, 0.555174, 0.527646, 0.496900, 0.471499, 0.445906, 0.419362, 0.393300, 0.368825, 0.344754, 0.325955, 0.303600, 0.282585, 0.265238, 0.250196, 0.234194, 0.219211, 0.203229, 0.189903, 0.177366, 0.166020, 0.153160, 0.143091, 0.133721, 0.125481, 0.116889, 0.109056, 0.102276, 0.095799, 0.088747, 0.083556, 0.078206, 0.072986, 0.068567, 0.064252, 0.059304, 0.054956, 0.051705, 0.047743, 0.044662, 0.041159, 0.038585, 0.035677, 0.033044, 0.030634, 0.028746, 0.026742, 0.024630, 0.022829, 0.020896, 0.019406, 0.018199, 0.016901, 0.016001, 0.014935, 0.013881, 0.013061, 0.012065, 0.011210, 0.010450, 0.009667, 0.009083, 0.008501 };
*/

//return interpolated response (e-/photons) for specific wavelength
double response ( int channel, double wavelength )
{
	double *wavelengths, *responses;
	int i;

	if ( channel == 1 )
	{
		wavelengths = wavelengths_IRAC_ch1;
		responses = responses_IRAC_ch1;
	}
	else if ( channel == 2 )
	{
		wavelengths = wavelengths_IRAC_ch2;
		responses = responses_IRAC_ch2;
	}
	else if ( channel == 3 )
	{
		wavelengths = wavelengths_IRAC_ch3;
		responses = responses_IRAC_ch3;
	}
	else if ( channel == 4 )
	{
		wavelengths = wavelengths_IRAC_ch4;
		responses = responses_IRAC_ch4;
	}
	else if ( channel == 24 )
	{
		wavelengths = wavelengths_MIPS_24;
		responses = responses_MIPS_24;
	}
	else if ( channel == 70 )
	{
		wavelengths = wavelengths_MIPS_70;
		responses = responses_MIPS_70;
	}
	
	if (channel < 5) // ------------------------------------ IRAC
	  {
	    if ( (wavelength < lower_limits_IRAC[channel-1]) || (wavelength > upper_limits_IRAC[channel-1]) )
	      return 0;

	    //make an educated guess for the array-field holding wavelength
	    i = (int)((wavelength-lower_limits_IRAC[channel-1])/
		      ((upper_limits_IRAC[channel-1]-lower_limits_IRAC[channel-1])/i_max_IRAC[channel-1]));
	    
	    if ( i >= i_max_IRAC[channel-1] )
	      i = i_max_IRAC[channel-1] - 1;
	    
	    
	    //printf("i: %d, channel %d, lambda %f, w[i]: %e, r[i]: %e, ", i, channel, wavelength, wavelengths[i], responses[i]);
	    //printf("w[i+1]: %e, r[i+1]: %e\n", wavelengths[i+1], responses[i+1]);
	    
	    while ( !(wavelengths[i]<=wavelength && wavelengths[i+1]>=wavelength) )
	      {
		if ( wavelengths[i]>wavelength )
		  i--;
		else 
		  i++;
	      }
	    
	    if ( wavelengths[i] == wavelength )
	      return responses[i];
	    else if ( wavelengths[i+1] == wavelength )
	      return responses[i+1];
	    else
	      return (responses[i+1]-responses[i])/(wavelengths[i+1]-wavelengths[i])
		*(wavelength-wavelengths[i])+responses[i];
	  }
	else // ------------------------------------ MIPS
	  {

	    if (channel == 24)  channel = 1;
	    if (channel == 70)  channel = 2;

	    if ( (wavelength < lower_limits_MIPS[channel-1]) || (wavelength > upper_limits_MIPS[channel-1]) )
		return 0;

	    //make an educated guess for the array-field holding wavelength
	    i = (int)((wavelength-lower_limits_MIPS[channel-1])/
		      ((upper_limits_MIPS[channel-1]-lower_limits_MIPS[channel-1])/i_max_MIPS[channel-1]));
	    
	    if ( i >= i_max_MIPS[channel-1] )
	      i = i_max_MIPS[channel-1] - 1;

	    //printf("i: %d, channel %d, lambda %f, w[i]: %e, r[i]: %e, ", i, channel, wavelength, wavelengths[i], responses[i]);
	    //printf("w[i+1]: %e, r[i+1]: %e\n", wavelengths[i+1], responses[i+1]);
	    
	    if ( (i == i_max_MIPS[channel-1]-1 ) && (wavelengths[i] <= wavelength))
	      return responses[i];

	    while ( !(wavelengths[i]<=wavelength && wavelengths[i+1]>=wavelength) )
	      {
		if ( wavelengths[i]>wavelength )
		  i--;
		else 
		  i++;
	      }
	    
	    if ( wavelengths[i] == wavelength )
	      return responses[i];
	    else if ( wavelengths[i+1] == wavelength )
	      return responses[i+1];
	    else
		return (responses[i+1]-responses[i])/(wavelengths[i+1]-wavelengths[i])
		  *(wavelength-wavelengths[i])+responses[i];

	  }
	    
}

double testspektrum (double lambda, double temp)
{
	//return pow(lambda,-(2)-2);
	return 1/(lambda*lambda*lambda*lambda*lambda*(exp(HCK/(lambda*200))-1));
}


// Romberg Integration for correction
double color_romberg (  double(*k_integrand)(ASTEROID, double, int, double), 
			ASTEROID *obj, int i, double a, double b, int channel, double eps)
{
	double I[JMAX+1][JMAX+1];
	double h[JMAX+1];
	double sum;
	int n, k, j;
	
	//if ( a == b )
	//	return 0;  //otherwise no convergence
	
	//calculate I_{1,1} = trapezoidal rule
	h[1] = (b-a);
	
	I[1][1] = 0.5*h[1]*(k_integrand(obj[i], a, channel, eps) 
	                    + k_integrand(obj[i], b, channel, eps));

	//printf("      mit I[1][1] = %.3e\n", I[1][1]);
	for ( n = 2; n <= JMAX; n++ )
	{	
		h[n] = h[n-1]*0.5;
		
		//calculate I_{n,1} using less calculation steps
		for ( k = 1, sum = 0; k <= pow(2,(n-2)); k++ )
		  sum += k_integrand(obj[i], a + (2*k-1) * h[n], channel, eps);
		I[n][1] = 0.5*I[n-1][1] + h[n]*sum;
		
		
		//calculate I_{n,1} according to textbook -> the long way
		//for ( i = 1, sum = 0; i <= (h[1]/h[n]-1); i++ )
		//	sum += integration_model(a + i * h[n], phase, eps, wavelength, T0);
		//I[n][1] = 0.5*h[n]*(integration_model(a, phase, eps, wavelength, T0, parameter) 
		//                    + integration_model(b, phase, eps, wavelength, T0, parameter) + 2*sum);
		//printf("                   0.5*I[n-1][1]=%.5e,  h[n]*sum=%.5e\n", 0.5*I[n-1][1],  h[n]*sum);
		
		//calculate I_{n,1} using existing results
		int m = n, k = 1;
		for ( j = 1; j < n; j++ )
		{
			k++;
			m--;
			
			//calculate I_{m,k}
			I[m][k] = I[m+1][k-1] + (I[m+1][k-1] - I[m][k-1])
					/(pow(2,(2*k-2)) - 1);
		}
		//printf("     in Schleife mit n=%d, h=%.3e und I[1][%d] = %.8e\n", n, h[n], n, I[1][n]);
		
		//check for nan
		if ( isnan(I[1][n]) )
		{
		  printf("ERROR in Romberg integration (color correction): NaN (iteration %d)\n", n);
		  for (k=0; k<=n; k++) 
		    printf ("n=%d: %f\n", k, I[1][k]);
		  printf("all flux densities of this object upper limit detections?\n");
		  abort();
		}
		
		//do at least 5 iterations
		if (n > 5)
			//check for convergence inbetween epsilon and special case
			//of I[1][j] == 0 for (0<j<6)
			if ( (fabs(I[1][n]-I[1][n-1])/I[1][n] < eps) ||
			      (I[1][n] == 0 && I[1][n-1] == 0 ) )
			    return I[1][n];
	}
	
	printf("WARNING: Romberg Integration did not converge! Return %.3e\n", I[1][n-1]);
	return I[1][n-1];
}


//supports ONLY NEATM!!!
double k_nominator_integrand ( ASTEROID obj,  double wavelength, int channel, double epsilon )
{
  if (wavelength == 0) wavelength = 1e-15;

   double resp = response(channel, wavelength); 
  if (channel < 5 )
    return planck_neatm(obj, epsilon)*resp*wavelength;
  else
    {
      double pv = pv_from_D(obj.diameter, obj.absmag);
      double T0 = pow((1-bondalbedo(obj.slopepar, pv))*SOLARCONST/(obj.heliodist*obj.heliodist
								   *obj.eta*EMISSIVITY*STEFANBOLTZMANN), 0.25);
      return resp/(wavelength*wavelength*wavelength*wavelength*wavelength*(exp(HCK/(wavelength*T0))-1));
    }
  //return testspektrum(wavelength, T0)*response(channel, wavelength)*wavelength;
}



double k_denominator_integrand ( ASTEROID obj,  double wavelength, int channel, double epsilon )
{
	// = Int[ response * wavelength * refspec ] with refspec = wavelength^-1
  if (channel < 5) return response(channel, wavelength);
  else 
      return response(channel, wavelength)/(wavelength*wavelength*wavelength*wavelength*wavelength*(exp(HCK/(wavelength*10000))-1)) ; 
}



//returns color correction factor K
//supports only NEATM!!
double IRACcolorcorr ( ASTEROID *obj, int i, int channel, double epsilon )
{
	double k = 1.0;

	if ( (channel < 1) || (channel > 2))
	{
		printf("ERROR: wavelength could not be resolved!n");
		abort();
	}
				
	// = refspec(wavelength)/targetspec(wavelength)*Int[response*wavelength*targetspec]/Int[response*wavelength*refspec]
	//  with refspec = wavelength^-1
	k = 1/(obj[i].wavelength*planck_neatm(obj[i], epsilon))
		  *color_romberg ( k_nominator_integrand, obj, i, lower_limits_IRAC[channel-1], upper_limits_IRAC[channel-1], channel, epsilon )
		  /color_romberg ( k_denominator_integrand, obj, i, lower_limits_IRAC[channel-1], upper_limits_IRAC[channel-1], channel, epsilon );
	
	//for use with testspektrum
	//return 1/(testspektrum(obj.wavelength, T0)*obj.wavelength)*color_romberg ( k_nominator_integrand, lower_limits[channel-1], upper_limits[channel-1], channel, 
	//	                 obj.diameter, obj.geodist, obj.phaseangle, epsilon, T0 )
	//	/color_romberg ( k_denominator_integrand, lower_limits[channel-1], upper_limits[channel-1], channel, 
	//	                 obj.diameter, obj.geodist, obj.phaseangle, epsilon, T0 );

	// printf ("%f\n", k);

	return k;
}


//returns color correction factor K
//supports only NEATM!!
double MIPScolorcorr ( ASTEROID *obj, int i, int channel, double epsilon )
{
	double k = 1.0;
	int array_channel = 0;

	if (channel == 24) array_channel = 1;
	else if (channel == 70) array_channel = 2;
	else
	{
		printf("ERROR: wavelength could not be resolved!n");
		abort();
	}
		
	double pv = pv_from_D(obj[i].diameter, obj[i].absmag);
	double T0 = pow((1-bondalbedo(obj[i].slopepar, pv))*SOLARCONST/(obj[i].heliodist*obj[i].heliodist
			*obj[i].eta*EMISSIVITY*STEFANBOLTZMANN), 0.25);
		
 	// = refspec(wavelength)/targetspec(wavelength)*Int[response*wavelength*targetspec]/Int[response*wavelength*refspec]
	//  with refspec = wavelength^-1
	k = (exp(HCK/(obj[i].wavelength*T0))-1)/(exp(HCK/(obj[i].wavelength*10000))-1)
		  *color_romberg ( k_nominator_integrand, obj, i, lower_limits_MIPS[array_channel-1], upper_limits_MIPS[array_channel-1], channel, epsilon )
		  /color_romberg ( k_denominator_integrand, obj, i, lower_limits_MIPS[array_channel-1], upper_limits_MIPS[array_channel-1], channel, epsilon );
	

	//printf ("%f\n", color_romberg ( k_nominator_integrand, obj, i, lower_limits_MIPS[array_channel-1], upper_limits_MIPS[array_channel-1], channel, epsilon ));

	FILE *ccfile = fopen ("cc.dat", "a");
	fprintf( ccfile, "%f  %f   %f\n", obj[i].wavelength, T0, k );
	fclose(ccfile);

	//for use with testspektrum
	//return 1/(testspektrum(obj.wavelength, T0)*obj.wavelength)*color_romberg ( k_nominator_integrand, lower_limits[channel-1], upper_limits[channel-1], channel, 
	//	                 obj.diameter, obj.geodist, obj.phaseangle, epsilon, T0 )
	//	/color_romberg ( k_denominator_integrand, lower_limits[channel-1], upper_limits[channel-1], channel, 
	//	                 obj.diameter, obj.geodist, obj.phaseangle, epsilon, T0 );

	//printf ("%f K, %f um : %f\n", T0,  obj[i].wavelength, k);

	return k;
}









